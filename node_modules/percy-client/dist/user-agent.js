'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _package = require('../package.json');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserAgent = function () {
  function UserAgent(client) {
    _classCallCheck(this, UserAgent);

    if (!client) {
      throw new Error('"client" arg is required to create a UserAgent.');
    }
    this._client = client;
  }

  _createClass(UserAgent, [{
    key: 'toString',
    value: function toString() {
      var client = ['Percy/' + this._apiVersion(), this._client._sdkClientInfo, this._client._clientInfo, 'percy-js/' + _package.version].filter(function (el) {
        return el != null;
      }).join(' ');

      var environment = [this._client._sdkEnvironmentInfo, this._client._environmentInfo, 'node/' + this._nodeVersion(), this._client.environment.ciVersion].filter(function (el) {
        return el != null;
      }).join('; ');

      return client + ' (' + environment + ')';
    }
  }, {
    key: '_nodeVersion',
    value: function _nodeVersion() {
      return process.version;
    }
  }, {
    key: '_apiVersion',
    value: function _apiVersion() {
      return (/\w+$/.exec(this._client.apiUrl)
      );
    }
  }]);

  return UserAgent;
}();

module.exports = UserAgent;