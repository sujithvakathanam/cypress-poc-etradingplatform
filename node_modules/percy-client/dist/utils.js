'use strict';

var crypto = require('crypto');
var fs = require('fs');
var path = require('path');
var walk = require('walk');

var MAX_FILE_SIZE_BYTES = 15728640; // 15MB.

module.exports = {
  sha256hash: function sha256hash(content) {
    return crypto.createHash('sha256').update(content, 'utf8').digest('hex');
  },
  base64encode: function base64encode(content) {
    return Buffer.from(content).toString('base64');
  },
  getMissingResources: function getMissingResources(response) {
    return response && response.body && response.body.data && response.body.data.relationships && response.body.data.relationships['missing-resources'] && response.body.data.relationships['missing-resources'].data || [];
  },


  // Synchronously walk a directory of compiled assets, read each file and calculate its SHA 256
  // hash, and create an array of Resource objects.
  gatherBuildResources: function gatherBuildResources(percyClient, rootDir) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // The base of the URL that will be prepended to every resource URL, such as "/assets".
    options.baseUrlPath = options.baseUrlPath || '';
    options.skippedPathRegexes = options.skippedPathRegexes || [];
    options.followLinks = options.followLinks || true;

    var resources = [];

    var fileWalker = function fileWalker(root, fileStats, next) {
      var absolutePath = path.join(root, fileStats.name);
      var resourceUrl = absolutePath.replace(rootDir, '');

      if (path.sep == '\\') {
        // Windows support: transform filesystem backslashes into forward-slashes for the URL.
        resourceUrl = resourceUrl.replace(/\\/g, '/');
      }

      // Prepend the baseUrlPath if it is given. We normalize it to make sure it does not have
      // a trailing slash, or it's a blank string.
      var normalizedBaseUrlPath = (options.baseUrlPath || '/').replace(/\/$/, '');
      resourceUrl = normalizedBaseUrlPath + resourceUrl;

      // Skip excluded paths.
      for (var i in options.skippedPathRegexes) {
        if (resourceUrl.match(options.skippedPathRegexes[i])) {
          next();
          return;
        }
      }

      // Skip large files.
      if (fs.statSync(absolutePath)['size'] > MAX_FILE_SIZE_BYTES) {
        // eslint-disable-next-line no-console
        console.warn('\n[percy][WARNING] Skipping large build resource: ', resourceUrl);
        return;
      }

      // Note: this is synchronous and potentially memory intensive, but we don't keep a
      // reference to the content around so each should be garbage collected. Reevaluate?
      var content = fs.readFileSync(absolutePath);
      var sha = crypto.createHash('sha256').update(content).digest('hex');

      var resource = percyClient.makeResource({
        resourceUrl: encodeURI(resourceUrl),
        sha: sha,
        localPath: absolutePath
      });

      resources.push(resource);
      next();
    };

    var walkOptions = {
      // Follow symlinks because assets may be just symlinks.
      followLinks: options.followLinks,
      listeners: {
        file: fileWalker
      }
    };
    walk.walkSync(rootDir, walkOptions);

    return resources;
  },
  reverseString: function reverseString(str) {
    return str.split('').reverse().join('');
  }
};